// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?        @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  posts          Post[]
  postComment    PostComment[]
  postValidation PostValidation[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  description    String
  location       String
  lat            Float
  lng            Float
  postCategory   PostCategory     @relation(fields: [postCategoryId], references: [id])
  postMedia      PostMedia[]
  postValidation PostValidation[]
  postComment    PostComment[]
  User           User             @relation(fields: [userId], references: [id])
  userId         String
  postCategoryId String
}

model PostCategory {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]
}

model PostValidation {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  validation Boolean

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model PostMedia {
  id     String  @id @default(cuid())
  name   String
  url    String
  alt    String
  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

model PostComment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}
